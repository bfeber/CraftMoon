[gd_scene load_steps=7 format=3 uid="uid://dw6jfbejcfr0i"]

[ext_resource type="Script" path="res://player.gd" id="1_4qesr"]

[sub_resource type="BoxShape3D" id="BoxShape3D_1njnr"]
size = Vector3(1, 2, 1)

[sub_resource type="GDScript" id="GDScript_huho1"]
resource_name = "ObjectBuilder"
script/source = "extends RayCast3D


@export var material: BaseMaterial3D

var vertices: Array[Vector3]
var st: SurfaceTool
var mi: MeshInstance3D
var current_edge_left: Vector3
var current_edge_right: Vector3
var edge_node: Node3D
var height: int
var mouse_y_delta: float


# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	st = SurfaceTool.new()
	st.begin(Mesh.PRIMITIVE_TRIANGLES)
	mi = MeshInstance3D.new()
	get_tree().current_scene.add_child.call_deferred(mi)


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	var point := get_collision_point()
	get_parent_node_3d().position.y = height + 2
	get_parent_node_3d().look_at(point)
	get_parent_node_3d().rotation.y = 0
	get_parent_node_3d().rotation.z = 0
	point.y = height

	var left := Vector3.LEFT.rotated(Vector3.UP, global_rotation.y)
	var right := Vector3.RIGHT.rotated(Vector3.UP, global_rotation.y)

	if vertices.is_empty():
		Draw3D.line(point + left, point + right, Color.BLUE, 1)
	else:
		Draw3D.point(point, 0.02, Color.BLUE, 1)
		Draw3D.line(point, point + Vector3.DOWN * 1000, Color.DIM_GRAY, 1)

		if vertices.size() < 3:
			Draw3D.line(current_edge_left, current_edge_right, Color.BLUE, 1)
		else:
			if not Input.is_action_pressed(\"action\") and not Input.is_action_just_released(\"action\"):
				edge_node = get_nearest_node(get_tree().get_nodes_in_group(\"Edge\"), point)

			Draw3D.line(edge_node.get_meta(\"start_point\") + Vector3.UP * 0.1, edge_node.get_meta(\"end_point\") + Vector3.UP * 0.1, Color.BLUE, 1)

	if Input.is_action_just_pressed(\"action\"):
		if vertices.is_empty():
			st.add_vertex(point + left)
			vertices.append(point + left)

			st.add_vertex(point + right)
			vertices.append(point + right)

			current_edge_left = point + left
			current_edge_right = point + right
	if Input.is_action_just_released(\"action\"):
		height = 0
		mouse_y_delta = 0

		if vertices.size() > 2:
			st.add_vertex(edge_node.get_meta(\"start_point\"))
			st.add_vertex(edge_node.get_meta(\"end_point\"))

			vertices.append(edge_node.get_meta(\"start_point\"))
			vertices.append(edge_node.get_meta(\"end_point\"))

		st.add_vertex(point)
		vertices.append(point)

		var n1 := Node3D.new()
		var n2 := Node3D.new()
		var n3 := Node3D.new()

		n1.add_to_group(\"Edge\")
		n2.add_to_group(\"Edge\")
		n3.add_to_group(\"Edge\")

		get_tree().current_scene.add_child(n1)
		get_tree().current_scene.add_child(n2)
		get_tree().current_scene.add_child(n3)

		n1.global_position = vertices[vertices.size() - 3] + (vertices[vertices.size() - 2] - vertices[vertices.size() - 3]) / 2
		n2.global_position = vertices[vertices.size() - 2] + (vertices[vertices.size() - 1] - vertices[vertices.size() - 2]) / 2
		n3.global_position = vertices[vertices.size() - 1] + (vertices[vertices.size() - 3] - vertices[vertices.size() - 1]) / 2

		n1.set_meta(\"start_point\", vertices[vertices.size() - 3])
		n1.set_meta(\"end_point\", vertices[vertices.size() - 2])

		n2.set_meta(\"start_point\", vertices[vertices.size() - 2])
		n2.set_meta(\"end_point\", vertices[vertices.size() - 1])

		n3.set_meta(\"start_point\", vertices[vertices.size() - 1])
		n3.set_meta(\"end_point\", vertices[vertices.size() - 3])

		mi.mesh = st.commit()
		mi.set_surface_override_material(0, material)


func get_nearest_node(nodes: Array[Node], position: Vector3) -> Node3D:
	nodes.sort_custom(func(a, b): return a.global_position.distance_squared_to(position) < b.global_position.distance_squared_to(position))
	return nodes[0]


func _unhandled_input(event: InputEvent) -> void:
	var mouse_motion := event as InputEventMouseMotion
	if mouse_motion and DisplayServer.mouse_get_mode() == DisplayServer.MOUSE_MODE_CAPTURED:
		if Input.is_action_pressed(\"change_height\"):
			mouse_y_delta -= mouse_motion.relative.y
			height = int(mouse_y_delta / 100)
"

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_opf6s"]
cull_mode = 2
shading_mode = 0
albedo_color = Color(0.482353, 0, 0, 1)

[sub_resource type="BoxMesh" id="BoxMesh_ca7p1"]
size = Vector3(0.05, 0.05, 0.05)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_fbi4f"]
albedo_color = Color(0, 0, 0, 1)

[node name="Player" type="CharacterBody3D"]
collision_layer = 0
script = ExtResource("1_4qesr")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
shape = SubResource("BoxShape3D_1njnr")

[node name="Pivot" type="Node3D" parent="."]

[node name="Camera3D" type="Camera3D" parent="Pivot"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2, 0)

[node name="RayCast3D" type="RayCast3D" parent="Pivot/Camera3D"]
target_position = Vector3(0, 0, -5)
script = SubResource("GDScript_huho1")
material = SubResource("StandardMaterial3D_opf6s")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
visible = false
mesh = SubResource("BoxMesh_ca7p1")
surface_material_override/0 = SubResource("StandardMaterial3D_fbi4f")
